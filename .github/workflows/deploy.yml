name: DeployerBot

on:
  pull_request:
#    types: [ labeled ]
# test5
  workflow_call:
    inputs: {}
    secrets: {}
env:
  COMPOSE_FILE: docker-compose.yml
  NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
#concurrency: docker_compose_ngrok_free
jobs:
  simple-docker-compose:
    if: contains(github.event.pull_request.labels.*.name, 'deploy')
    permissions:
      deployments: write
      pull-requests: write
      actions: write
    runs-on: ubuntu-latest
    steps:
      - name: Check if user has write access
        uses: lannonbr/repo-permission-check-action@2.0.2
        with:
          permission: "write"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#      - name: Cancel Previous Runs
#        uses: styfle/cancel-workflow-action@0.11.0
#        with:
#          access_token: ${{ secrets.GITHUB_TOKEN }}
#          workflow_id: DeployerBot,deploy,deploy.yml

#      - name: Sleep after cancel
#        run: sleep 30s
#        shell: bash

      - uses: chrnorm/deployment-action@v2.0.5
        name: Create GitHub deployment
        id: deployment
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: development

      - name: Checkout
        uses: actions/checkout@v3

#      - name: Run establish a ngrok tunnel
#        id: expose_ngrok
#        uses: wikiteq/ngrok-tunneling-action@master
#        with:
#          timeout: 1h
#          port: 80
#          ngrok_authtoken: ${{ secrets.NGROK_TOKEN }}
#          tunnel_type: http

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2.0.1
        with:
          token: ${{ secrets.NGROK_TOKEN }}
          state: 'failure'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - uses: codetalkio/expose-tunnel@v1.4.0
        id: expose_ngrok
        with:
#          service: localhost.run
          service: bore.pub
          port: 80

      - name: Test Ngrok fail
        if: ${{ steps.expose_ngrok.outputs.tunnel-url == '' }}
        run: exit 1
        shell: bash

      - name: Setup env
        run: cp .env.ci .env

      - name: Update server variable
        run: echo "MW_SITE_SERVER=${{ steps.expose_ngrok.outputs.tunnel-url }}" >> .env
        shell: bash

      - name: Setup Docker Compose
        uses: yu-ichiro/spin-up-docker-compose-action@main
        with:
          file: ${{ env.COMPOSE_FILE }}
          cache-key: simple-docker-compose

      - name: Give containers a moment to init
        run: sleep 30s
        shell: bash

      - name: Update deployment status (success)
        uses: chrnorm/deployment-status@v2.0.1
        if: success()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment-url: ${{ steps.expose_ngrok.outputs.tunnel-url }}
          state: 'success'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Comment on PR
        if: ${{ steps.expose_ngrok.outputs.tunnel-url != '' && github.event_name == 'pull_request' }}
        uses: mshick/add-pr-comment@v2
        id: comment
        with:
          message: "The PR is deployed to ${{ steps.expose_ngrok.outputs.tunnel-url }}. Stay-alive time is 1 hour, re-run the action to re-deploy. The action will continue running until timeout or cancelled. To prevent future deployments remove the `deploy` label from the PR."
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          allow-repeats: true

      - name: Sleep
        run: docker-compose logs -f
        shell: bash

      - name: Update deployment status (success)
        uses: chrnorm/deployment-status@v2.0.1
        if: cancelled() || failure()
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'inactive'
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}

#      - name: Sleep
#        run: sleep 3600s
#        shell: bash
